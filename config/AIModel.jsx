import { GoogleGenerativeAI, HarmCategory, HarmBlockThreshold } from "@google/generative-ai";
  
  const apiKey = process.env.GEMINI_API_KEY
  const genAI = new GoogleGenerativeAI(apiKey);
  
  const model = genAI.getGenerativeModel({
    model: "gemini-2.0-flash-exp",
  });
  
  const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "text/plain",
  };

  const CodeGenerationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "application/json",
  };
  
    export const chatSession = model.startChat({
      generationConfig,
      history: [
      ],
    });

    export const GenAiCode = model.startChat({
      generationConfig : CodeGenerationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "generate todo app:\n\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\n\nHere’s the reformatted and improved version of your prompt:\n\nGenerate a programming code structure for a React project using Vite. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, without any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\n\nReturn the response in JSON format with the following schema:\n\njson\nCopy code\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\nEnsure the files field contains all created files, and the generatedFiles field lists all the filenames. Each file's code should be included in the code field, following this example:\nfiles:{\n  \"/App.js\": {\n    \"code\": \"import React from 'react';\\nimport './styles.css';\\nexport default function App() {\\n  return (\\n    <div className='p-4 bg-gray-100 text-center'>\\n      <h1 className='text-2xl font-bold text-blue-500'>Hello, Tailwind CSS with Sandpack!</h1>\\n      <p className='mt-2 text-gray-700'>This is a live code editor.</p>\\n    </div>\\n  );\\n}\"\n  }\n}\n  Additionally, include an explanation of the project's structure, purpose, and functionality in the explanation field. Make the response concise and clear in one paragraph.\n  - When asked then only use this package to import, here are some packages available to import and use (date-fns,react-chartjs-2,\"firebase\",\"@google/generative-ai\" ) only when it required\n  \n  - For placeholder images, please use a https://archive.org/download/placeholder-image/placeholder-image.jpg\n  -Add Emoji icons whenever needed to give good user experinence\n  - all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.\n"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n{\n  \"projectTitle\": \"Interactive Todo App\",\n  \"explanation\": \"This project creates a fully featured interactive todo application using React and Tailwind CSS. It includes components for managing tasks, filtering them, and providing a clean user experience. The app allows users to add new todos, mark them as complete, edit existing todos, delete todos, and filter based on task completion status. The design is responsive and user-friendly, with icons from 'lucide-react' enhancing the interface.\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"import React from 'react';\\nimport TodoList from './components/TodoList';\\nimport './index.css';\\n\\nfunction App() {\\n  return (\\n    <div className=\\\"min-h-screen bg-gray-100 flex items-center justify-center py-10\\\">\\n      <div className=\\\"bg-white shadow-xl rounded-lg p-6 w-full max-w-2xl\\\">\\n        <h1 className=\\\"text-3xl font-bold text-gray-800 mb-6 text-center\\\">✨ Todo App ✨</h1>\\n        <TodoList />\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default App;\"\n    },\n    \"/components/TodoList.js\": {\n      \"code\": \"import React, { useState, useEffect } from 'react';\\nimport TodoItem from './TodoItem';\\nimport { Plus } from 'lucide-react';\\n\\nconst TodoList = () => {\\n  const [todos, setTodos] = useState(() => {\\n      const savedTodos = localStorage.getItem('todos');\\n      if (savedTodos) {\\n        return JSON.parse(savedTodos);\\n      } else {\\n        return [];\\n      }\\n    });\\n  const [newTodo, setNewTodo] = useState('');\\n  const [filter, setFilter] = useState('all');\\n  const [editTodoId, setEditTodoId] = useState(null);\\n  const [editTodoText, setEditTodoText] = useState('');\\n\\n   useEffect(() => {\\n    localStorage.setItem('todos', JSON.stringify(todos));\\n  }, [todos]);\\n\\n  const handleAddTodo = () => {\\n    if (newTodo.trim() !== '') {\\n      setTodos([...todos, { id: Date.now(), text: newTodo, completed: false }]);\\n      setNewTodo('');\\n    }\\n  };\\n\\n  const handleToggleComplete = (id) => {\\n    setTodos(todos.map(todo =>\\n      todo.id === id ? { ...todo, completed: !todo.completed } : todo\\n    ));\\n  };\\n\\n  const handleDeleteTodo = (id) => {\\n    setTodos(todos.filter(todo => todo.id !== id));\\n  };\\n\\n    const handleEditTodo = (id, text) => {\\n        setEditTodoId(id);\\n        setEditTodoText(text);\\n    };\\n\\n  const handleUpdateTodo = () => {\\n        if (editTodoText.trim() !== '') {\\n          setTodos(todos.map(todo =>\\n                todo.id === editTodoId ? { ...todo, text: editTodoText } : todo\\n            ));\\n            setEditTodoId(null);\\n            setEditTodoText('');\\n        }\\n  };\\n\\n    const handleCancelEdit = () => {\\n      setEditTodoId(null);\\n      setEditTodoText('');\\n    };\\n\\n  const filteredTodos = todos.filter(todo => {\\n    if (filter === 'completed') return todo.completed;\\n    if (filter === 'active') return !todo.completed;\\n    return true;\\n  });\\n\\n  return (\\n    <div>\\n      <div className=\\\"flex space-x-2 mb-4\\\">\\n        <input\\n          type=\\\"text\\\"\\n          placeholder=\\\"Add a new todo...\\\"          value={newTodo}\\n          onChange={(e) => setNewTodo(e.target.value)}\\n          className=\\\"flex-1 p-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500\\\"        />\\n        <button onClick={handleAddTodo} className=\\\"bg-blue-500 text-white p-2 rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500\\\">\\n            <Plus className='h-4 w-4'/>\\n        </button>\\n      </div>\\n      <div className=\\\"mb-4 flex space-x-2\\\">\\n        <button onClick={() => setFilter('all')} className={`px-3 py-1 rounded  ${filter === 'all' ? 'bg-gray-300' : 'bg-gray-200 hover:bg-gray-300'}`}>All</button>\\n        <button onClick={() => setFilter('active')} className={`px-3 py-1 rounded  ${filter === 'active' ? 'bg-gray-300' : 'bg-gray-200 hover:bg-gray-300'}`}>Active</button>\\n        <button onClick={() => setFilter('completed')} className={`px-3 py-1 rounded  ${filter === 'completed' ? 'bg-gray-300' : 'bg-gray-200 hover:bg-gray-300'}`}>Completed</button>\\n      </div>\\n      <ul className=\\\"space-y-2\\\">\\n        {filteredTodos.map(todo => (\\n            <TodoItem\\n            key={todo.id}\\n            todo={todo}\\n            onToggleComplete={handleToggleComplete}\\n            onDeleteTodo={handleDeleteTodo}\\n            onEditTodo={handleEditTodo}\\n            isEditing={editTodoId === todo.id}\\n            editTodoText={editTodoText}\\n            setEditTodoText={setEditTodoText}\\n            onUpdateTodo={handleUpdateTodo}\\n            onCancelEdit={handleCancelEdit}\\n          />\\n        ))}\\n      </ul>\\n    </div>\\n  );\\n};\\n\\nexport default TodoList;\"\n    },\n    \"/components/TodoItem.js\": {\n      \"code\": \"import React, { useState } from 'react';\\nimport { Trash, Edit, Check, X } from 'lucide-react';\\n\\nconst TodoItem = ({ todo, onToggleComplete, onDeleteTodo, onEditTodo, isEditing, editTodoText, setEditTodoText, onUpdateTodo, onCancelEdit }) => {\\n\\n  return (\\n        <li className=\\\"flex items-center justify-between p-3 border rounded bg-gray-50 shadow\\\">\\n            {isEditing ? (\\n                <div className='flex-1 space-x-2'>\\n                    <input\\n                        type=\\\"text\\\"\\n                        value={editTodoText}\\n                        onChange={(e) => setEditTodoText(e.target.value)}\\n                        className=\\\"flex-1 p-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500\\\"\\n                    />\\n                    <button onClick={onUpdateTodo} className='bg-green-500 hover:bg-green-600 text-white p-1 rounded'><Check className='h-4 w-4'/></button>\\n                    <button onClick={onCancelEdit} className='bg-red-500 hover:bg-red-600 text-white p-1 rounded'><X className='h-4 w-4'/></button>\\n                </div>\\n            ) : (\\n               <div className='flex-1 flex items-center space-x-2'>\\n                    <input type=\\\"checkbox\\\" checked={todo.completed} onChange={() => onToggleComplete(todo.id)} className='mr-2'/>\\n                 <span className={`${todo.completed ? 'line-through text-gray-500' : ''}`}>{todo.text}</span>\\n                </div>\\n            )}\\n             <div className='space-x-2'>\\n               {!isEditing && <button onClick={() => onEditTodo(todo.id, todo.text)} className='bg-yellow-500 hover:bg-yellow-600 text-white p-1 rounded'><Edit className='h-4 w-4'/></button>}\\n                <button onClick={() => onDeleteTodo(todo.id)} className='bg-red-500 hover:bg-red-600 text-white p-1 rounded'><Trash className='h-4 w-4'/></button>\\n             </div>\\n\\n        </li>\\n  );\\n};\\n\\nexport default TodoItem;\"\n    },\n        \"/index.css\": {\n      \"code\": \"@tailwind base;\\n@tailwind components;\\n@tailwind utilities;\"\n    },\n    \"/tailwind.config.js\": {\n      \"code\": \"/** @type {import('tailwindcss').Config} */\\nmodule.exports = {\\n  content: [\\n    \\\"./src/**/*.{js,jsx,ts,tsx}\\\",\\n    \\\"./components/**/*.{js,jsx,ts,tsx}\\\"\\n  ],\\n  theme: {\\n    extend: {},\\n  },\\n  plugins: [],\\n}\"\n    }\n  },\n  \"generatedFiles\": [\n    \"/App.js\",\n    \"/components/TodoList.js\",\n    \"/components/TodoItem.js\",\n    \"/index.css\",\n    \"/tailwind.config.js\"\n  ]\n}\n```\n"},
          ],
        },
      ],
    });


  // const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
  // console.log(result.response.text());

  